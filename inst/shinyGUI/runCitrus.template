# Autogenerated runCitrus.R File
# Author: Robert Bruggner / bruggner@stanford.edu
# Compatible with Citrus version <%cat(templateData[["citrusVersion"]])%>

rm(list = ls())
library("citrus",lib.loc=<% if (is.null(templateData[["library"]])){
                              cat("NULL")
                            } else {
                              cat(paste("\"",templateData[["library"]],"\"",sep=""))
                            } %>)

# Use this line to limit the number of threads used by clustering
<%if (!templateData[["coreLimit"]]){cat("# ")}%>Rclusterpp.setThreads(<%cat(templateData[["analysisCores"]])%>);
<%if (!templateData[["coreLimit"]]){cat("# ")}%>options("mc.cores"=<%cat(templateData[["analysisCores"]])%>);

family = "classification"
dataDirectory = "../"
# dataDirectory = <%cat(stringQuote(templateData[["dataDir"]]))%>

outputDirectory = <%cat("file.path(dataDirectory,\"citrusOutput\")")%>
clusteringColumns = c(<%cat(paste(sapply(templateData[["clusterCols"]],stringQuote),collapse=","))%>)
<% if ("medianColumns" %in% names(templateData)) {
cat(paste("medianColumns=c(",paste(sapply(templateData[["medianColumns"]],stringQuote),collapse=","),")\n",sep=""))
}%>
transformColumns = c(<%cat(ifelse(length(templateData[["transformCols"]])>0,paste(sapply(templateData[["transformCols"]],stringQuote),collapse=","),"NULL"))%>)
transformCofactor = <%cat(ifelse(length(templateData[["transformCols"]])>0,templateData[["transformCofactor"]],"NULL"))%>

minimumClusterSizePercent = <%cat(templateData[["minimumClusterSizePercent"]])%>
modelTypes = c(<% cat(paste(sapply(templateData[["classificationModels"]],stringQuote),collapse=",")) %>)
fileSampleSize = <% cat(templateData[["fileSampleSize"]]) %>
nFolds = <%cat(templateData[["crossValidationFolds"]]) %>
featureType = c(<%cat(stringQuote(templateData[["featureType"]]))%>)
fileList = data.frame(<%
                        if (templateData[["preload"]]){
                          labelAssignments=templateData[["keyFile"]]
                        } else {
                          selectedFiles = getSelectedFiles(input)
                          labelAssignments = convertToLabeledFileList(selectedFiles)
                        }
                        labelCol = which(colnames(labelAssignments)=="labels")
                        labels = labelAssignments[,labelCol]
                        labelAssignments = labelAssignments[,-labelCol,drop=F]
                        cat(paste(sapply(colnames(labelAssignments),convertColToDefinition,df=labelAssignments),collapse=",\n"))
                      %>)
labels = as.factor(c(<%cat(paste(sapply(labels,stringQuote),collapse=","))%>))

<% if (templateData[["preload"]]){
  cat(
    paste(
      "conditionComparaMatrix = matrix(c(",
                                         paste(as.vector(templateData[["conditionComparaMatrix"]]),collapse=","),
                              "), ncol=",
                                         length(templateData[["conditions"]]),
                                ",nrow=",
                                         length(templateData[["conditions"]]),
                                ",dimnames=list(c(",
                                          paste(sapply(templateData[["conditions"]],stringQuote),collapse=","),
                                "),c(",
                                          paste(sapply(templateData[["conditions"]],stringQuote),collapse=","),
                                ")))",
                                sep=""))
}%>

results = citrus.full(
            fileList=fileList,
            labels=labels,
            clusteringColumns=clusteringColumns,
            dataDirectory=dataDirectory,
            outputDirectory=outputDirectory,
            family=family,
            modelTypes=modelTypes,
            nFolds=nFolds,
            plot=T,
            <% if ("conditionComparaMatrix" %in% names(templateData)){cat("conditionComparaMatrix=conditionComparaMatrix,")} %>
            fileSampleSize=fileSampleSize,
            featureType=featureType,
            minimumClusterSizePercent=minimumClusterSizePercent,
            transformColumns=transformColumns,
            transformCofactor=transformCofactor
            <% if ("medianColumns" %in% names(templateData)){cat(",medianColumns=medianColumns")} %>
)

# ==================================================================================================
# The following lines perform the same analysis as the citrus.full() function but broken down
# into component steps. This is may be more useful to run if you plan on running the clustering
# once but examining many endpoints, features, or minimum cluster sizes. You should uncomment 
# the clustering, feature extraction, regression, and plotting functionlines. 
# ==================================================================================================

# Cluster all the data

# OR load a previous clustering result. All other variables must be set by previous lines in runCitrus.R

# Build cluster features

# Run the regression 

# Plot Results
