# Autogenerated runCitrus.R File
# Author: Robert Bruggner / bruggner@stanford.edu
# Compatible with Citrus version <%cat(templateData[["citrusVersion"]])%>

rm(list = ls())
library("citrus",lib.loc=<% if (is.null(templateData[["library"]])){
                              cat("NULL")
                            } else {
                              cat(paste("\"",templateData[["library"]],"\"",sep=""))
                            } %>)

# Uncomment this next line if the clustering step crashes on Mac OS X (i.e. abort trap 6)
# Rclusterpp.setThreads(1);

family = "twoClass"
dataDirectory = "../"
# dataDirectory = <%cat(stringQuote(templateData[["dataDir"]]))%>

outputDir = <%cat("file.path(dataDirectory,\"citrusOutput\")")%>
clusterCols = c(<%cat(paste(sapply(templateData[["clusterCols"]],stringQuote),collapse=","))%>)
<% if ("medianCols" %in% names(templateData)) {
cat(paste("medianColumns=c(",paste(sapply(templateData[["medianCols"]],stringQuote),collapse=","),")\n",sep=""))
}%>
<% if ("emdCols" %in% names(templateData)) {
cat(paste("emdColumns=c(",paste(sapply(templateData[["emdCols"]],stringQuote),collapse=","),")\n",sep=""))
}%>
transformCols = c(<%cat(paste(sapply(templateData[["transformCols"]],stringQuote),collapse=","))%>)
minimumClusterSizePercent = <%cat(templateData[["minimumClusterSizePercent"]])%>
modelTypes = c(<% cat(paste(sapply(templateData[["twoClassModels"]],stringQuote),collapse=",")) %>)
fileSampleSize = <% cat(templateData[["fileSampleSize"]]) %>
<% if (templateData[["crossValidationFolds"]]==1){
  templateData[["crossValidationFolds"]]='"all"'
}%>
nFolds = <%cat(templateData[["crossValidationFolds"]]) %>
featureTypes = c(<%cat(paste(sapply(templateData[["computedFeatures"]],stringQuote),collapse=","))%>)
fileList = data.frame(<%
                        if (templateData[["preload"]]){
                          labelAssignments=templateData[["keyFile"]]
                        } else {
                          selectedFiles = getSelectedFiles(input)
                          labelAssignments = convertToLabeledFileList(selectedFiles)
                        }
                        labelCol = which(colnames(labelAssignments)=="labels")
                        labels = labelAssignments[,labelCol]
                        labelAssignments = labelAssignments[,-labelCol,drop=F]
                        cat(paste(sapply(colnames(labelAssignments),convertColToDefinition,df=labelAssignments),collapse=",\n"))
                      %>)
labels = as.factor(c(<%cat(paste(sapply(labels,stringQuote),collapse=","))%>))

<% if (templateData[["preload"]]){
  cat(
    paste(
      "conditionComparaMatrix = matrix(c(",
                                         paste(as.vector(templateData[["conditionComparaMatrix"]]),collapse=","),
                              "), ncol=",
                                         length(templateData[["conditions"]]),
                                ",nrow=",
                                         length(templateData[["conditions"]]),
                                ",dimnames=list(c(",
                                          paste(sapply(templateData[["conditions"]],stringQuote),collapse=","),
                                "),c(",
                                          paste(sapply(templateData[["conditions"]],stringQuote),collapse=","),
                                ")))",
                                sep=""))
}%>

results = citrus.full(
            dataDir=dataDirectory,
            outputDir=outputDir,
            clusterCols=clusterCols,
            fileSampleSize=fileSampleSize,
            labels=labels,
            nFolds=nFolds,
            family=family,
            fileList=fileList,
            modelTypes=modelTypes,
            featureTypes=featureTypes,
            minimumClusterSizePercent=minimumClusterSizePercent,
            transformCols=transformCols
            <% if ("conditionComparaMatrix" %in% names(templateData)){cat(",conditionComparaMatrix=conditionComparaMatrix")} %>
            <% if ("medianCols" %in% names(templateData)){cat(",medianColumns=medianColumns")} %>
            <% if ("emdCols" %in% names(templateData)){cat(",emdColumns=emdColumns")} %>
)

# ==================================================================================================
# The following lines perform the same analysis as the citrus.full() function but broken down
# into component steps. This is may be more useful to run if you plan on running the clustering
# once but examining many endpoints, features, or minimum cluster sizes. You should uncomment 
# the clustering, feature extraction, regression, and plotting functionlines. 
# ==================================================================================================

# Cluster all the data
# clusterResult = citrus.preCluster(dataDir=dataDirectory,outputDir=outputDir,clusterCols=clusterCols,fileSampleSize=fileSampleSize, fileList=fileList,nFolds=nFolds,transformCols=transformCols<% if ("conditionComparaMatrix" %in% names(templateData)){cat(", conditionComparaMatrix=conditionComparaMatrix")}%>)

# Build cluster features
# conditionFeatureList = citrus.buildFeatures(preclusterResult=clusterResult,outputDir=outputDir,featureTypes=featureTypes,minimumClusterSizePercent=minimumClusterSizePercent<% if ("medianCols" %in% names(templateData)){cat(",medianColumns=medianColumns")} %><% if ("emdCols" %in% names(templateData)){cat(",emdColumns=emdColumns")} %>)

# Run the regression 
# regressionResult = citrus.endpointRegress(conditionFeatureList,family=family,modelTypes=modelTypes,labels=labels)

# Plot Results
# citrus.plotRegressionResults(outputDir=outputDir,citrus.preclusterResult=clusterResult,conditionFeatureList=conditionFeatureList,citrus.regressionResult=regressionResult,modelTypes=modelTypes,family=family,labels=labels)
